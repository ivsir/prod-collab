{"ast":null,"code":"import { HeaderMarshaller } from \"@smithy/eventstream-codec\";\nimport { toHex } from \"@smithy/util-hex-encoding\";\nimport { normalizeProvider } from \"@smithy/util-middleware\";\nimport { fromUtf8, toUint8Array, toUtf8 } from \"@smithy/util-utf8\";\nimport { ALGORITHM_IDENTIFIER, ALGORITHM_QUERY_PARAM, AMZ_DATE_HEADER, AMZ_DATE_QUERY_PARAM, AUTH_HEADER, CREDENTIAL_QUERY_PARAM, EVENT_ALGORITHM_IDENTIFIER, EXPIRES_QUERY_PARAM, MAX_PRESIGNED_TTL, SHA256_HEADER, SIGNATURE_QUERY_PARAM, SIGNED_HEADERS_QUERY_PARAM, TOKEN_HEADER, TOKEN_QUERY_PARAM } from \"./constants\";\nimport { createScope, getSigningKey } from \"./credentialDerivation\";\nimport { getCanonicalHeaders } from \"./getCanonicalHeaders\";\nimport { getCanonicalQuery } from \"./getCanonicalQuery\";\nimport { getPayloadHash } from \"./getPayloadHash\";\nimport { hasHeader } from \"./headerUtil\";\nimport { moveHeadersToQuery } from \"./moveHeadersToQuery\";\nimport { prepareRequest } from \"./prepareRequest\";\nimport { iso8601 } from \"./utilDate\";\nexport class SignatureV4 {\n  constructor(_ref) {\n    let {\n      applyChecksum,\n      credentials,\n      region,\n      service,\n      sha256,\n      uriEscapePath = true\n    } = _ref;\n    this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);\n    this.service = service;\n    this.sha256 = sha256;\n    this.uriEscapePath = uriEscapePath;\n    this.applyChecksum = typeof applyChecksum === \"boolean\" ? applyChecksum : true;\n    this.regionProvider = normalizeProvider(region);\n    this.credentialProvider = normalizeProvider(credentials);\n  }\n  async presign(originalRequest) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      signingDate = new Date(),\n      expiresIn = 3600,\n      unsignableHeaders,\n      unhoistableHeaders,\n      signableHeaders,\n      signingRegion,\n      signingService\n    } = options;\n    const credentials = await this.credentialProvider();\n    this.validateResolvedCredentials(credentials);\n    const region = signingRegion ?? (await this.regionProvider());\n    const {\n      longDate,\n      shortDate\n    } = formatDate(signingDate);\n    if (expiresIn > MAX_PRESIGNED_TTL) {\n      return Promise.reject(\"Signature version 4 presigned URLs\" + \" must have an expiration date less than one week in\" + \" the future\");\n    }\n    const scope = createScope(shortDate, region, signingService ?? this.service);\n    const request = moveHeadersToQuery(prepareRequest(originalRequest), {\n      unhoistableHeaders\n    });\n    if (credentials.sessionToken) {\n      request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;\n    }\n    request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;\n    request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;\n    request.query[AMZ_DATE_QUERY_PARAM] = longDate;\n    request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);\n    const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n    request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);\n    request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256)));\n    return request;\n  }\n  async sign(toSign, options) {\n    if (typeof toSign === \"string\") {\n      return this.signString(toSign, options);\n    } else if (toSign.headers && toSign.payload) {\n      return this.signEvent(toSign, options);\n    } else if (toSign.message) {\n      return this.signMessage(toSign, options);\n    } else {\n      return this.signRequest(toSign, options);\n    }\n  }\n  async signEvent(_ref2, _ref3) {\n    let {\n      headers,\n      payload\n    } = _ref2;\n    let {\n      signingDate = new Date(),\n      priorSignature,\n      signingRegion,\n      signingService\n    } = _ref3;\n    const region = signingRegion ?? (await this.regionProvider());\n    const {\n      shortDate,\n      longDate\n    } = formatDate(signingDate);\n    const scope = createScope(shortDate, region, signingService ?? this.service);\n    const hashedPayload = await getPayloadHash({\n      headers: {},\n      body: payload\n    }, this.sha256);\n    const hash = new this.sha256();\n    hash.update(headers);\n    const hashedHeaders = toHex(await hash.digest());\n    const stringToSign = [EVENT_ALGORITHM_IDENTIFIER, longDate, scope, priorSignature, hashedHeaders, hashedPayload].join(\"\\n\");\n    return this.signString(stringToSign, {\n      signingDate,\n      signingRegion: region,\n      signingService\n    });\n  }\n  async signMessage(signableMessage, _ref4) {\n    let {\n      signingDate = new Date(),\n      signingRegion,\n      signingService\n    } = _ref4;\n    const promise = this.signEvent({\n      headers: this.headerMarshaller.format(signableMessage.message.headers),\n      payload: signableMessage.message.body\n    }, {\n      signingDate,\n      signingRegion,\n      signingService,\n      priorSignature: signableMessage.priorSignature\n    });\n    return promise.then(signature => {\n      return {\n        message: signableMessage.message,\n        signature\n      };\n    });\n  }\n  async signString(stringToSign) {\n    let {\n      signingDate = new Date(),\n      signingRegion,\n      signingService\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const credentials = await this.credentialProvider();\n    this.validateResolvedCredentials(credentials);\n    const region = signingRegion ?? (await this.regionProvider());\n    const {\n      shortDate\n    } = formatDate(signingDate);\n    const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));\n    hash.update(toUint8Array(stringToSign));\n    return toHex(await hash.digest());\n  }\n  async signRequest(requestToSign) {\n    let {\n      signingDate = new Date(),\n      signableHeaders,\n      unsignableHeaders,\n      signingRegion,\n      signingService\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const credentials = await this.credentialProvider();\n    this.validateResolvedCredentials(credentials);\n    const region = signingRegion ?? (await this.regionProvider());\n    const request = prepareRequest(requestToSign);\n    const {\n      longDate,\n      shortDate\n    } = formatDate(signingDate);\n    const scope = createScope(shortDate, region, signingService ?? this.service);\n    request.headers[AMZ_DATE_HEADER] = longDate;\n    if (credentials.sessionToken) {\n      request.headers[TOKEN_HEADER] = credentials.sessionToken;\n    }\n    const payloadHash = await getPayloadHash(request, this.sha256);\n    if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {\n      request.headers[SHA256_HEADER] = payloadHash;\n    }\n    const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n    const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));\n    request.headers[AUTH_HEADER] = `${ALGORITHM_IDENTIFIER} ` + `Credential=${credentials.accessKeyId}/${scope}, ` + `SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, ` + `Signature=${signature}`;\n    return request;\n  }\n  createCanonicalRequest(request, canonicalHeaders, payloadHash) {\n    const sortedHeaders = Object.keys(canonicalHeaders).sort();\n    return `${request.method}\n${this.getCanonicalPath(request)}\n${getCanonicalQuery(request)}\n${sortedHeaders.map(name => `${name}:${canonicalHeaders[name]}`).join(\"\\n\")}\n\n${sortedHeaders.join(\";\")}\n${payloadHash}`;\n  }\n  async createStringToSign(longDate, credentialScope, canonicalRequest) {\n    const hash = new this.sha256();\n    hash.update(toUint8Array(canonicalRequest));\n    const hashedRequest = await hash.digest();\n    return `${ALGORITHM_IDENTIFIER}\n${longDate}\n${credentialScope}\n${toHex(hashedRequest)}`;\n  }\n  getCanonicalPath(_ref5) {\n    let {\n      path\n    } = _ref5;\n    if (this.uriEscapePath) {\n      const normalizedPathSegments = [];\n      for (const pathSegment of path.split(\"/\")) {\n        if (pathSegment?.length === 0) continue;\n        if (pathSegment === \".\") continue;\n        if (pathSegment === \"..\") {\n          normalizedPathSegments.pop();\n        } else {\n          normalizedPathSegments.push(pathSegment);\n        }\n      }\n      const normalizedPath = `${path?.startsWith(\"/\") ? \"/\" : \"\"}${normalizedPathSegments.join(\"/\")}${normalizedPathSegments.length > 0 && path?.endsWith(\"/\") ? \"/\" : \"\"}`;\n      const doubleEncoded = encodeURIComponent(normalizedPath);\n      return doubleEncoded.replace(/%2F/g, \"/\");\n    }\n    return path;\n  }\n  async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {\n    const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);\n    const hash = new this.sha256(await keyPromise);\n    hash.update(toUint8Array(stringToSign));\n    return toHex(await hash.digest());\n  }\n  getSigningKey(credentials, region, shortDate, service) {\n    return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);\n  }\n  validateResolvedCredentials(credentials) {\n    if (typeof credentials !== \"object\" || typeof credentials.accessKeyId !== \"string\" || typeof credentials.secretAccessKey !== \"string\") {\n      throw new Error(\"Resolved credential object is not valid\");\n    }\n  }\n}\nconst formatDate = now => {\n  const longDate = iso8601(now).replace(/[\\-:]/g, \"\");\n  return {\n    longDate,\n    shortDate: longDate.slice(0, 8)\n  };\n};\nconst getCanonicalHeaderList = headers => Object.keys(headers).sort().join(\";\");","map":{"version":3,"names":["HeaderMarshaller","toHex","normalizeProvider","fromUtf8","toUint8Array","toUtf8","ALGORITHM_IDENTIFIER","ALGORITHM_QUERY_PARAM","AMZ_DATE_HEADER","AMZ_DATE_QUERY_PARAM","AUTH_HEADER","CREDENTIAL_QUERY_PARAM","EVENT_ALGORITHM_IDENTIFIER","EXPIRES_QUERY_PARAM","MAX_PRESIGNED_TTL","SHA256_HEADER","SIGNATURE_QUERY_PARAM","SIGNED_HEADERS_QUERY_PARAM","TOKEN_HEADER","TOKEN_QUERY_PARAM","createScope","getSigningKey","getCanonicalHeaders","getCanonicalQuery","getPayloadHash","hasHeader","moveHeadersToQuery","prepareRequest","iso8601","SignatureV4","constructor","_ref","applyChecksum","credentials","region","service","sha256","uriEscapePath","headerMarshaller","regionProvider","credentialProvider","presign","originalRequest","options","arguments","length","undefined","signingDate","Date","expiresIn","unsignableHeaders","unhoistableHeaders","signableHeaders","signingRegion","signingService","validateResolvedCredentials","longDate","shortDate","formatDate","Promise","reject","scope","request","sessionToken","query","accessKeyId","toString","canonicalHeaders","getCanonicalHeaderList","getSignature","createCanonicalRequest","sign","toSign","signString","headers","payload","signEvent","message","signMessage","signRequest","_ref2","_ref3","priorSignature","hashedPayload","body","hash","update","hashedHeaders","digest","stringToSign","join","signableMessage","_ref4","promise","format","then","signature","requestToSign","payloadHash","sortedHeaders","Object","keys","sort","method","getCanonicalPath","map","name","createStringToSign","credentialScope","canonicalRequest","hashedRequest","_ref5","path","normalizedPathSegments","pathSegment","split","pop","push","normalizedPath","startsWith","endsWith","doubleEncoded","encodeURIComponent","replace","keyPromise","secretAccessKey","Error","now","slice"],"sources":["/Users/risvitareq/code/prod-collab2/client/node_modules/@smithy/signature-v4/dist-es/SignatureV4.js"],"sourcesContent":["import { HeaderMarshaller } from \"@smithy/eventstream-codec\";\nimport { toHex } from \"@smithy/util-hex-encoding\";\nimport { normalizeProvider } from \"@smithy/util-middleware\";\nimport { fromUtf8, toUint8Array, toUtf8 } from \"@smithy/util-utf8\";\nimport { ALGORITHM_IDENTIFIER, ALGORITHM_QUERY_PARAM, AMZ_DATE_HEADER, AMZ_DATE_QUERY_PARAM, AUTH_HEADER, CREDENTIAL_QUERY_PARAM, EVENT_ALGORITHM_IDENTIFIER, EXPIRES_QUERY_PARAM, MAX_PRESIGNED_TTL, SHA256_HEADER, SIGNATURE_QUERY_PARAM, SIGNED_HEADERS_QUERY_PARAM, TOKEN_HEADER, TOKEN_QUERY_PARAM, } from \"./constants\";\nimport { createScope, getSigningKey } from \"./credentialDerivation\";\nimport { getCanonicalHeaders } from \"./getCanonicalHeaders\";\nimport { getCanonicalQuery } from \"./getCanonicalQuery\";\nimport { getPayloadHash } from \"./getPayloadHash\";\nimport { hasHeader } from \"./headerUtil\";\nimport { moveHeadersToQuery } from \"./moveHeadersToQuery\";\nimport { prepareRequest } from \"./prepareRequest\";\nimport { iso8601 } from \"./utilDate\";\nexport class SignatureV4 {\n    constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true, }) {\n        this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);\n        this.service = service;\n        this.sha256 = sha256;\n        this.uriEscapePath = uriEscapePath;\n        this.applyChecksum = typeof applyChecksum === \"boolean\" ? applyChecksum : true;\n        this.regionProvider = normalizeProvider(region);\n        this.credentialProvider = normalizeProvider(credentials);\n    }\n    async presign(originalRequest, options = {}) {\n        const { signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService, } = options;\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const { longDate, shortDate } = formatDate(signingDate);\n        if (expiresIn > MAX_PRESIGNED_TTL) {\n            return Promise.reject(\"Signature version 4 presigned URLs\" + \" must have an expiration date less than one week in\" + \" the future\");\n        }\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        const request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders });\n        if (credentials.sessionToken) {\n            request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;\n        }\n        request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;\n        request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;\n        request.query[AMZ_DATE_QUERY_PARAM] = longDate;\n        request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);\n        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);\n        request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256)));\n        return request;\n    }\n    async sign(toSign, options) {\n        if (typeof toSign === \"string\") {\n            return this.signString(toSign, options);\n        }\n        else if (toSign.headers && toSign.payload) {\n            return this.signEvent(toSign, options);\n        }\n        else if (toSign.message) {\n            return this.signMessage(toSign, options);\n        }\n        else {\n            return this.signRequest(toSign, options);\n        }\n    }\n    async signEvent({ headers, payload }, { signingDate = new Date(), priorSignature, signingRegion, signingService }) {\n        const region = signingRegion ?? (await this.regionProvider());\n        const { shortDate, longDate } = formatDate(signingDate);\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        const hashedPayload = await getPayloadHash({ headers: {}, body: payload }, this.sha256);\n        const hash = new this.sha256();\n        hash.update(headers);\n        const hashedHeaders = toHex(await hash.digest());\n        const stringToSign = [\n            EVENT_ALGORITHM_IDENTIFIER,\n            longDate,\n            scope,\n            priorSignature,\n            hashedHeaders,\n            hashedPayload,\n        ].join(\"\\n\");\n        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });\n    }\n    async signMessage(signableMessage, { signingDate = new Date(), signingRegion, signingService }) {\n        const promise = this.signEvent({\n            headers: this.headerMarshaller.format(signableMessage.message.headers),\n            payload: signableMessage.message.body,\n        }, {\n            signingDate,\n            signingRegion,\n            signingService,\n            priorSignature: signableMessage.priorSignature,\n        });\n        return promise.then((signature) => {\n            return { message: signableMessage.message, signature };\n        });\n    }\n    async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const { shortDate } = formatDate(signingDate);\n        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));\n        hash.update(toUint8Array(stringToSign));\n        return toHex(await hash.digest());\n    }\n    async signRequest(requestToSign, { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService, } = {}) {\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const request = prepareRequest(requestToSign);\n        const { longDate, shortDate } = formatDate(signingDate);\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        request.headers[AMZ_DATE_HEADER] = longDate;\n        if (credentials.sessionToken) {\n            request.headers[TOKEN_HEADER] = credentials.sessionToken;\n        }\n        const payloadHash = await getPayloadHash(request, this.sha256);\n        if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {\n            request.headers[SHA256_HEADER] = payloadHash;\n        }\n        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));\n        request.headers[AUTH_HEADER] =\n            `${ALGORITHM_IDENTIFIER} ` +\n                `Credential=${credentials.accessKeyId}/${scope}, ` +\n                `SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, ` +\n                `Signature=${signature}`;\n        return request;\n    }\n    createCanonicalRequest(request, canonicalHeaders, payloadHash) {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort();\n        return `${request.method}\n${this.getCanonicalPath(request)}\n${getCanonicalQuery(request)}\n${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join(\"\\n\")}\n\n${sortedHeaders.join(\";\")}\n${payloadHash}`;\n    }\n    async createStringToSign(longDate, credentialScope, canonicalRequest) {\n        const hash = new this.sha256();\n        hash.update(toUint8Array(canonicalRequest));\n        const hashedRequest = await hash.digest();\n        return `${ALGORITHM_IDENTIFIER}\n${longDate}\n${credentialScope}\n${toHex(hashedRequest)}`;\n    }\n    getCanonicalPath({ path }) {\n        if (this.uriEscapePath) {\n            const normalizedPathSegments = [];\n            for (const pathSegment of path.split(\"/\")) {\n                if (pathSegment?.length === 0)\n                    continue;\n                if (pathSegment === \".\")\n                    continue;\n                if (pathSegment === \"..\") {\n                    normalizedPathSegments.pop();\n                }\n                else {\n                    normalizedPathSegments.push(pathSegment);\n                }\n            }\n            const normalizedPath = `${path?.startsWith(\"/\") ? \"/\" : \"\"}${normalizedPathSegments.join(\"/\")}${normalizedPathSegments.length > 0 && path?.endsWith(\"/\") ? \"/\" : \"\"}`;\n            const doubleEncoded = encodeURIComponent(normalizedPath);\n            return doubleEncoded.replace(/%2F/g, \"/\");\n        }\n        return path;\n    }\n    async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {\n        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);\n        const hash = new this.sha256(await keyPromise);\n        hash.update(toUint8Array(stringToSign));\n        return toHex(await hash.digest());\n    }\n    getSigningKey(credentials, region, shortDate, service) {\n        return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);\n    }\n    validateResolvedCredentials(credentials) {\n        if (typeof credentials !== \"object\" ||\n            typeof credentials.accessKeyId !== \"string\" ||\n            typeof credentials.secretAccessKey !== \"string\") {\n            throw new Error(\"Resolved credential object is not valid\");\n        }\n    }\n}\nconst formatDate = (now) => {\n    const longDate = iso8601(now).replace(/[\\-:]/g, \"\");\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n    };\n};\nconst getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(\";\");\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}