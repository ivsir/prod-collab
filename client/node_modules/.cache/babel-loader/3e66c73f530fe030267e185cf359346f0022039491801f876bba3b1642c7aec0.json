{"ast":null,"code":"var _s2 = $RefreshSig$();\nimport { useToast } from '@chakra-ui/react';\nimport { useState } from 'react';\nimport axiosClient from '../config/axios';\nimport AuthService from \"./auth\";\nimport { QUERY_USER } from \"./queries\";\nimport { useQuery } from \"@apollo/client\";\nconst useMutation = _ref => {\n  _s2();\n  var _s = $RefreshSig$();\n  let {\n    url,\n    method = 'POST'\n  } = _ref;\n  const toast = useToast();\n  const [state, setState] = useState({\n    isLoading: false,\n    error: ''\n  });\n  const fn = async data => {\n    _s();\n    setState(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    const {\n      loading,\n      data: userData\n    } = useQuery(QUERY_USER, {\n      variables: {\n        username: AuthService.getUsername()\n      }\n    });\n    const user = (userData === null || userData === void 0 ? void 0 : userData.user.username) || {};\n    console.log(user);\n\n    // Create a unique folder name for each user (replace 'userId' with the actual user ID)\n    const userId = '${'; // You should get the user ID from your authentication system\n\n    // Add a folder creation step before making the HTTP request\n    axiosClient({\n      url: `/create-folder/${userId}`,\n      method: 'POST'\n    }).then(() => {\n      // Now, you can proceed with your original HTTP request\n      axiosClient({\n        url,\n        method,\n        data\n      }).then(() => {\n        setState({\n          isLoading: false,\n          error: ''\n        });\n        toast({\n          title: 'Successfully Added Image',\n          status: 'success',\n          duration: 2000,\n          position: 'top'\n        });\n      }).catch(error => {\n        setState({\n          isLoading: false,\n          error: error.message\n        });\n      });\n    }).catch(error => {\n      setState({\n        isLoading: false,\n        error: error.message\n      });\n    });\n  };\n  _s(fn, \"2OxuRLaSOknTJVKJEgXF6K0a+sA=\", false, function () {\n    return [useQuery];\n  });\n  return {\n    mutate: fn,\n    ...state\n  };\n};\n\n// const useMutation = ({ url, method = 'POST' }) => {\n//   const toast = useToast();\n//   const [state, setState] = useState({\n//     isLoading: false,\n//     error: '',\n//   });\n\n//   const fn = async data => {\n//     setState(prev => ({\n//       ...prev,\n//       isLoading: true,\n//     }));\n//     axiosClient({ url, method, data })\n//       .then(() => {\n//         setState({ isLoading: false, error: '' });\n//         toast({\n//           title: 'Successfully Added Image',\n//           status: 'success',\n//           duration: 2000,\n//           position: 'top',\n//         });\n//       })\n//       .catch(error => {\n//         setState({ isLoading: false, error: error.message });\n//       });\n//   };\n\n//   return { mutate: fn, ...state };\n// };\n_s2(useMutation, \"EXwDPzXSRAk7rTHQ9R6toUOK1Hw=\", false, function () {\n  return [useToast];\n});\nexport default useMutation;","map":{"version":3,"names":["useToast","useState","axiosClient","AuthService","QUERY_USER","useQuery","useMutation","_ref","_s2","_s","$RefreshSig$","url","method","toast","state","setState","isLoading","error","fn","data","prev","loading","userData","variables","username","getUsername","user","console","log","userId","then","title","status","duration","position","catch","message","mutate"],"sources":["/Users/risvitareq/code/prod-collab2/client/src/utils/imgMutation.js"],"sourcesContent":["import { useToast } from '@chakra-ui/react';\nimport { useState } from 'react';\nimport axiosClient from '../config/axios';\nimport AuthService from \"./auth\";\nimport { QUERY_USER } from \"./queries\";\nimport { useQuery } from \"@apollo/client\";\n\nconst useMutation = ({ url, method = 'POST' }) => {\n  const toast = useToast();\n  const [state, setState] = useState({\n    isLoading: false,\n    error: '',\n  });\n\n  const fn = async data => {\n    setState(prev => ({\n      ...prev,\n      isLoading: true,\n    }));\n\n    const { loading, data: userData } = useQuery(QUERY_USER, {\n      variables: { username: AuthService.getUsername() },\n    });\n  \n    const user = userData?.user.username || {};\n  \n  console.log(user)\n\n    // Create a unique folder name for each user (replace 'userId' with the actual user ID)\n    const userId = '${'; // You should get the user ID from your authentication system\n\n    // Add a folder creation step before making the HTTP request\n    axiosClient({ url: `/create-folder/${userId}`, method: 'POST' })\n      .then(() => {\n        // Now, you can proceed with your original HTTP request\n        axiosClient({ url, method, data })\n          .then(() => {\n            setState({ isLoading: false, error: '' });\n            toast({\n              title: 'Successfully Added Image',\n              status: 'success',\n              duration: 2000,\n              position: 'top',\n            });\n          })\n          .catch(error => {\n            setState({ isLoading: false, error: error.message });\n          });\n      })\n      .catch(error => {\n        setState({ isLoading: false, error: error.message });\n      });\n  };\n\n  return { mutate: fn, ...state };\n};\n\n\n// const useMutation = ({ url, method = 'POST' }) => {\n//   const toast = useToast();\n//   const [state, setState] = useState({\n//     isLoading: false,\n//     error: '',\n//   });\n\n//   const fn = async data => {\n//     setState(prev => ({\n//       ...prev,\n//       isLoading: true,\n//     }));\n//     axiosClient({ url, method, data })\n//       .then(() => {\n//         setState({ isLoading: false, error: '' });\n//         toast({\n//           title: 'Successfully Added Image',\n//           status: 'success',\n//           duration: 2000,\n//           position: 'top',\n//         });\n//       })\n//       .catch(error => {\n//         setState({ isLoading: false, error: error.message });\n//       });\n//   };\n\n//   return { mutate: fn, ...state };\n// };\n\nexport default useMutation;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,WAAW,MAAM,iBAAiB;AACzC,OAAOC,WAAW,MAAM,QAAQ;AAChC,SAASC,UAAU,QAAQ,WAAW;AACtC,SAASC,QAAQ,QAAQ,gBAAgB;AAEzC,MAAMC,WAAW,GAAGC,IAAA,IAA8B;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAAA,IAA7B;IAAEC,GAAG;IAAEC,MAAM,GAAG;EAAO,CAAC,GAAAL,IAAA;EAC3C,MAAMM,KAAK,GAAGb,QAAQ,EAAE;EACxB,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC;IACjCe,SAAS,EAAE,KAAK;IAChBC,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,MAAMC,EAAE,GAAG,MAAMC,IAAI,IAAI;IAAAV,EAAA;IACvBM,QAAQ,CAACK,IAAI,KAAK;MAChB,GAAGA,IAAI;MACPJ,SAAS,EAAE;IACb,CAAC,CAAC,CAAC;IAEH,MAAM;MAAEK,OAAO;MAAEF,IAAI,EAAEG;IAAS,CAAC,GAAGjB,QAAQ,CAACD,UAAU,EAAE;MACvDmB,SAAS,EAAE;QAAEC,QAAQ,EAAErB,WAAW,CAACsB,WAAW;MAAG;IACnD,CAAC,CAAC;IAEF,MAAMC,IAAI,GAAG,CAAAJ,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEI,IAAI,CAACF,QAAQ,KAAI,CAAC,CAAC;IAE5CG,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;;IAEf;IACA,MAAMG,MAAM,GAAG,IAAI,CAAC,CAAC;;IAErB;IACA3B,WAAW,CAAC;MAAES,GAAG,EAAG,kBAAiBkB,MAAO,EAAC;MAAEjB,MAAM,EAAE;IAAO,CAAC,CAAC,CAC7DkB,IAAI,CAAC,MAAM;MACV;MACA5B,WAAW,CAAC;QAAES,GAAG;QAAEC,MAAM;QAAEO;MAAK,CAAC,CAAC,CAC/BW,IAAI,CAAC,MAAM;QACVf,QAAQ,CAAC;UAAEC,SAAS,EAAE,KAAK;UAAEC,KAAK,EAAE;QAAG,CAAC,CAAC;QACzCJ,KAAK,CAAC;UACJkB,KAAK,EAAE,0BAA0B;UACjCC,MAAM,EAAE,SAAS;UACjBC,QAAQ,EAAE,IAAI;UACdC,QAAQ,EAAE;QACZ,CAAC,CAAC;MACJ,CAAC,CAAC,CACDC,KAAK,CAAClB,KAAK,IAAI;QACdF,QAAQ,CAAC;UAAEC,SAAS,EAAE,KAAK;UAAEC,KAAK,EAAEA,KAAK,CAACmB;QAAQ,CAAC,CAAC;MACtD,CAAC,CAAC;IACN,CAAC,CAAC,CACDD,KAAK,CAAClB,KAAK,IAAI;MACdF,QAAQ,CAAC;QAAEC,SAAS,EAAE,KAAK;QAAEC,KAAK,EAAEA,KAAK,CAACmB;MAAQ,CAAC,CAAC;IACtD,CAAC,CAAC;EACN,CAAC;EAAC3B,EAAA,CAtCIS,EAAE;IAAA,QAM8Bb,QAAQ;EAAA;EAkC9C,OAAO;IAAEgC,MAAM,EAAEnB,EAAE;IAAE,GAAGJ;EAAM,CAAC;AACjC,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAAN,GAAA,CA/EMF,WAAW;EAAA,QACDN,QAAQ;AAAA;AAgFxB,eAAeM,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}