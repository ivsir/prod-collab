{"ast":null,"code":"import { useToast } from \"@chakra-ui/react\";\nimport { useState, useEffect } from \"react\";\nimport axiosClient from \"../config/axios\";\nimport AuthService from \"./auth\";\nimport { QUERY_USER } from \"./queries\";\nimport { useQuery } from \"@apollo/client\";\n\n// const useMutation = ({ url, method = \"POST\" }) => {\n//   const toast = useToast();\n//   const [state, setState] = useState({\n//     isLoading: false,\n//     error: \"\",\n//   });\n\n//   const { loading, data: userData } = useQuery(QUERY_USER, {\n//     variables: { username: AuthService.getUsername() },\n//   });\n\n//   const user = userData?.user.username || '';\n\n//   useEffect(() => {\n//     // Extract the username to a separate variable\n//     const username = userData?.user.username;\n\n//     if (username) {\n//       // Create a unique folder name for each user (replace 'userId' with the actual user ID)\n//       // You should get the user ID from your authentication system\n\n//       // Add a folder creation step before making the HTTP request\n//       axiosClient({ url: `/create-folder/${username}`, method: \"POST\" })\n//         .then(() => {\n//           // Now, you can proceed with your original HTTP request\n//           axiosClient({ url, method, data: {}})\n//             .then(() => {\n//               setState({ isLoading: false, error: \"\" });\n//               toast({\n//                 title: \"Successfully Added Image\",\n//                 status: \"success\",\n//                 duration: 2000,\n//                 position: \"top\",\n//               });\n//             })\n//             .catch((error) => {\n//               setState({ isLoading: false, error: error.message });\n//             });\n//         })\n//         .catch((error) => {\n//           setState({ isLoading: false, error: error.message });\n//         });\n//     }\n//   }, [url, method, userData, toast]);\n\n//   const fn = async (data) => {\n//     setState((prev) => ({\n//       ...prev,\n//       isLoading: true,\n//     }));\n//   };\n\n//   return { mutate: fn, ...state };\n// };\n\n// const useMutation = ({ url, method = 'POST' }) => {\n//   const toast = useToast();\n//   const [state, setState] = useState({\n//     isLoading: false,\n//     error: '',\n//   });\n\n//   const fn = async data => {\n//     setState(prev => ({\n//       ...prev,\n//       isLoading: true,\n//     }));\n//     axiosClient({ url, method, data })\n//       .then(() => {\n//         setState({ isLoading: false, error: '' });\n//         toast({\n//           title: 'Successfully Added Image',\n//           status: 'success',\n//           duration: 2000,\n//           position: 'top',\n//         });\n//       })\n//       .catch(error => {\n//         setState({ isLoading: false, error: error.message });\n//       });\n//   };\n\n//   return { mutate: fn, ...state };\n// };\n\nexport default useMutation;","map":{"version":3,"names":["useToast","useState","useEffect","axiosClient","AuthService","QUERY_USER","useQuery","useMutation"],"sources":["/Users/risvitareq/code/prod-collab2/client/src/utils/imgMutation.js"],"sourcesContent":["import { useToast } from \"@chakra-ui/react\";\nimport { useState, useEffect } from \"react\";\nimport axiosClient from \"../config/axios\";\nimport AuthService from \"./auth\";\nimport { QUERY_USER } from \"./queries\";\nimport { useQuery } from \"@apollo/client\";\n\n// const useMutation = ({ url, method = \"POST\" }) => {\n//   const toast = useToast();\n//   const [state, setState] = useState({\n//     isLoading: false,\n//     error: \"\",\n//   });\n\n//   const { loading, data: userData } = useQuery(QUERY_USER, {\n//     variables: { username: AuthService.getUsername() },\n//   });\n\n//   const user = userData?.user.username || '';\n\n//   useEffect(() => {\n//     // Extract the username to a separate variable\n//     const username = userData?.user.username;\n\n//     if (username) {\n//       // Create a unique folder name for each user (replace 'userId' with the actual user ID)\n//       // You should get the user ID from your authentication system\n\n//       // Add a folder creation step before making the HTTP request\n//       axiosClient({ url: `/create-folder/${username}`, method: \"POST\" })\n//         .then(() => {\n//           // Now, you can proceed with your original HTTP request\n//           axiosClient({ url, method, data: {}})\n//             .then(() => {\n//               setState({ isLoading: false, error: \"\" });\n//               toast({\n//                 title: \"Successfully Added Image\",\n//                 status: \"success\",\n//                 duration: 2000,\n//                 position: \"top\",\n//               });\n//             })\n//             .catch((error) => {\n//               setState({ isLoading: false, error: error.message });\n//             });\n//         })\n//         .catch((error) => {\n//           setState({ isLoading: false, error: error.message });\n//         });\n//     }\n//   }, [url, method, userData, toast]);\n\n//   const fn = async (data) => {\n//     setState((prev) => ({\n//       ...prev,\n//       isLoading: true,\n//     }));\n//   };\n\n//   return { mutate: fn, ...state };\n// };\n\n// const useMutation = ({ url, method = 'POST' }) => {\n//   const toast = useToast();\n//   const [state, setState] = useState({\n//     isLoading: false,\n//     error: '',\n//   });\n\n//   const fn = async data => {\n//     setState(prev => ({\n//       ...prev,\n//       isLoading: true,\n//     }));\n//     axiosClient({ url, method, data })\n//       .then(() => {\n//         setState({ isLoading: false, error: '' });\n//         toast({\n//           title: 'Successfully Added Image',\n//           status: 'success',\n//           duration: 2000,\n//           position: 'top',\n//         });\n//       })\n//       .catch(error => {\n//         setState({ isLoading: false, error: error.message });\n//       });\n//   };\n\n//   return { mutate: fn, ...state };\n// };\n\nexport default useMutation;\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,WAAW,MAAM,iBAAiB;AACzC,OAAOC,WAAW,MAAM,QAAQ;AAChC,SAASC,UAAU,QAAQ,WAAW;AACtC,SAASC,QAAQ,QAAQ,gBAAgB;;AAEzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,eAAeC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}