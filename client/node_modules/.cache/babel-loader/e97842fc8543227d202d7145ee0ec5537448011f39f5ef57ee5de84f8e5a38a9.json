{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useToast } from \"@chakra-ui/react\";\nimport { useState } from \"react\";\nimport axiosClient from \"../config/axios\";\nimport AuthService from \"./auth\";\nimport { QUERY_USER } from \"./queries\";\nimport { useQuery } from \"@apollo/client\";\nconst useMutation = _ref => {\n  _s();\n  let {\n    url,\n    method = \"POST\"\n  } = _ref;\n  const toast = useToast();\n  const [state, setState] = useState({\n    isLoading: false,\n    error: \"\"\n  });\n  const {\n    loading,\n    data: userData\n  } = useQuery(QUERY_USER, {\n    variables: {\n      username: AuthService.getUsername()\n    }\n  });\n  const user = (userData === null || userData === void 0 ? void 0 : userData.user.username) || {};\n  console.log(user);\n  const fn = async data => {\n    setState(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n\n    // Create a unique folder name for each user (replace 'userId' with the actual user ID)\n    ; // You should get the user ID from your authentication system\n\n    // Add a folder creation step before making the HTTP request\n    axiosClient({\n      url: `/create-folder/${userId}`,\n      method: \"POST\"\n    }).then(() => {\n      // Now, you can proceed with your original HTTP request\n      axiosClient({\n        url,\n        method,\n        data\n      }).then(() => {\n        setState({\n          isLoading: false,\n          error: \"\"\n        });\n        toast({\n          title: \"Successfully Added Image\",\n          status: \"success\",\n          duration: 2000,\n          position: \"top\"\n        });\n      }).catch(error => {\n        setState({\n          isLoading: false,\n          error: error.message\n        });\n      });\n    }).catch(error => {\n      setState({\n        isLoading: false,\n        error: error.message\n      });\n    });\n  };\n  return {\n    mutate: fn,\n    ...state\n  };\n};\n\n// const useMutation = ({ url, method = 'POST' }) => {\n//   const toast = useToast();\n//   const [state, setState] = useState({\n//     isLoading: false,\n//     error: '',\n//   });\n\n//   const fn = async data => {\n//     setState(prev => ({\n//       ...prev,\n//       isLoading: true,\n//     }));\n//     axiosClient({ url, method, data })\n//       .then(() => {\n//         setState({ isLoading: false, error: '' });\n//         toast({\n//           title: 'Successfully Added Image',\n//           status: 'success',\n//           duration: 2000,\n//           position: 'top',\n//         });\n//       })\n//       .catch(error => {\n//         setState({ isLoading: false, error: error.message });\n//       });\n//   };\n\n//   return { mutate: fn, ...state };\n// };\n_s(useMutation, \"4wVUvukqMIYjEqlWGeG9SCcz66k=\", false, function () {\n  return [useToast, useQuery];\n});\nexport default useMutation;","map":{"version":3,"names":["useToast","useState","axiosClient","AuthService","QUERY_USER","useQuery","useMutation","_ref","_s","url","method","toast","state","setState","isLoading","error","loading","data","userData","variables","username","getUsername","user","console","log","fn","prev","userId","then","title","status","duration","position","catch","message","mutate"],"sources":["/Users/risvitareq/code/prod-collab2/client/src/utils/imgMutation.js"],"sourcesContent":["import { useToast } from \"@chakra-ui/react\";\nimport { useState } from \"react\";\nimport axiosClient from \"../config/axios\";\nimport AuthService from \"./auth\";\nimport { QUERY_USER } from \"./queries\";\nimport { useQuery } from \"@apollo/client\";\n\nconst useMutation = ({ url, method = \"POST\" }) => {\n  const toast = useToast();\n  const [state, setState] = useState({\n    isLoading: false,\n    error: \"\",\n  });\n\n  const { loading, data: userData } = useQuery(QUERY_USER, {\n    variables: { username: AuthService.getUsername() },\n  });\n\n  const user = userData?.user.username || {};\n\n  console.log(user);\n  const fn = async (data) => {\n    setState((prev) => ({\n      ...prev,\n      isLoading: true,\n    }));\n\n    // Create a unique folder name for each user (replace 'userId' with the actual user ID)\n   ; // You should get the user ID from your authentication system\n\n    // Add a folder creation step before making the HTTP request\n    axiosClient({ url: `/create-folder/${userId}`, method: \"POST\" })\n      .then(() => {\n        // Now, you can proceed with your original HTTP request\n        axiosClient({ url, method, data })\n          .then(() => {\n            setState({ isLoading: false, error: \"\" });\n            toast({\n              title: \"Successfully Added Image\",\n              status: \"success\",\n              duration: 2000,\n              position: \"top\",\n            });\n          })\n          .catch((error) => {\n            setState({ isLoading: false, error: error.message });\n          });\n      })\n      .catch((error) => {\n        setState({ isLoading: false, error: error.message });\n      });\n  };\n\n  return { mutate: fn, ...state };\n};\n\n// const useMutation = ({ url, method = 'POST' }) => {\n//   const toast = useToast();\n//   const [state, setState] = useState({\n//     isLoading: false,\n//     error: '',\n//   });\n\n//   const fn = async data => {\n//     setState(prev => ({\n//       ...prev,\n//       isLoading: true,\n//     }));\n//     axiosClient({ url, method, data })\n//       .then(() => {\n//         setState({ isLoading: false, error: '' });\n//         toast({\n//           title: 'Successfully Added Image',\n//           status: 'success',\n//           duration: 2000,\n//           position: 'top',\n//         });\n//       })\n//       .catch(error => {\n//         setState({ isLoading: false, error: error.message });\n//       });\n//   };\n\n//   return { mutate: fn, ...state };\n// };\n\nexport default useMutation;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,WAAW,MAAM,iBAAiB;AACzC,OAAOC,WAAW,MAAM,QAAQ;AAChC,SAASC,UAAU,QAAQ,WAAW;AACtC,SAASC,QAAQ,QAAQ,gBAAgB;AAEzC,MAAMC,WAAW,GAAGC,IAAA,IAA8B;EAAAC,EAAA;EAAA,IAA7B;IAAEC,GAAG;IAAEC,MAAM,GAAG;EAAO,CAAC,GAAAH,IAAA;EAC3C,MAAMI,KAAK,GAAGX,QAAQ,EAAE;EACxB,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC;IACjCa,SAAS,EAAE,KAAK;IAChBC,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,MAAM;IAAEC,OAAO;IAAEC,IAAI,EAAEC;EAAS,CAAC,GAAGb,QAAQ,CAACD,UAAU,EAAE;IACvDe,SAAS,EAAE;MAAEC,QAAQ,EAAEjB,WAAW,CAACkB,WAAW;IAAG;EACnD,CAAC,CAAC;EAEF,MAAMC,IAAI,GAAG,CAAAJ,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEI,IAAI,CAACF,QAAQ,KAAI,CAAC,CAAC;EAE1CG,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EACjB,MAAMG,EAAE,GAAG,MAAOR,IAAI,IAAK;IACzBJ,QAAQ,CAAEa,IAAI,KAAM;MAClB,GAAGA,IAAI;MACPZ,SAAS,EAAE;IACb,CAAC,CAAC,CAAC;;IAEH;IACD,CAAC,CAAC;;IAED;IACAZ,WAAW,CAAC;MAAEO,GAAG,EAAG,kBAAiBkB,MAAO,EAAC;MAAEjB,MAAM,EAAE;IAAO,CAAC,CAAC,CAC7DkB,IAAI,CAAC,MAAM;MACV;MACA1B,WAAW,CAAC;QAAEO,GAAG;QAAEC,MAAM;QAAEO;MAAK,CAAC,CAAC,CAC/BW,IAAI,CAAC,MAAM;QACVf,QAAQ,CAAC;UAAEC,SAAS,EAAE,KAAK;UAAEC,KAAK,EAAE;QAAG,CAAC,CAAC;QACzCJ,KAAK,CAAC;UACJkB,KAAK,EAAE,0BAA0B;UACjCC,MAAM,EAAE,SAAS;UACjBC,QAAQ,EAAE,IAAI;UACdC,QAAQ,EAAE;QACZ,CAAC,CAAC;MACJ,CAAC,CAAC,CACDC,KAAK,CAAElB,KAAK,IAAK;QAChBF,QAAQ,CAAC;UAAEC,SAAS,EAAE,KAAK;UAAEC,KAAK,EAAEA,KAAK,CAACmB;QAAQ,CAAC,CAAC;MACtD,CAAC,CAAC;IACN,CAAC,CAAC,CACDD,KAAK,CAAElB,KAAK,IAAK;MAChBF,QAAQ,CAAC;QAAEC,SAAS,EAAE,KAAK;QAAEC,KAAK,EAAEA,KAAK,CAACmB;MAAQ,CAAC,CAAC;IACtD,CAAC,CAAC;EACN,CAAC;EAED,OAAO;IAAEC,MAAM,EAAEV,EAAE;IAAE,GAAGb;EAAM,CAAC;AACjC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAAJ,EAAA,CA7EMF,WAAW;EAAA,QACDN,QAAQ,EAMcK,QAAQ;AAAA;AAwE9C,eAAeC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}