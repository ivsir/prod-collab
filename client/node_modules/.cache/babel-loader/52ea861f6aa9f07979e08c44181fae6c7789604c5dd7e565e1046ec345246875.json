{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useToast } from \"@chakra-ui/react\";\nimport { useState, useEffect } from \"react\";\nimport axiosClient from \"../config/axios\";\nimport AuthService from \"./auth\";\nimport { QUERY_USER } from \"./queries\";\nimport { useQuery } from \"@apollo/client\";\nconst useMutation = _ref => {\n  _s();\n  let {\n    url,\n    method = \"POST\"\n  } = _ref;\n  const toast = useToast();\n  const [state, setState] = useState({\n    isLoading: false,\n    error: \"\"\n  });\n  const {\n    loading,\n    data: userData\n  } = useQuery(QUERY_USER, {\n    variables: {\n      username: AuthService.getUsername()\n    }\n  });\n  const user = (userData === null || userData === void 0 ? void 0 : userData.user.username) || {};\n  useEffect(() => {\n    // Extract the username to a separate variable\n    const username = userData === null || userData === void 0 ? void 0 : userData.user.username;\n    if (username) {\n      // Create a unique folder name for each user (replace 'userId' with the actual user ID)\n      // You should get the user ID from your authentication system\n\n      // Add a folder creation step before making the HTTP request\n      axiosClient({\n        url: `/create-folder/${username}`,\n        method: \"POST\"\n      }).then(() => {\n        // Now, you can proceed with your original HTTP request\n        axiosClient({\n          url,\n          method,\n          data: {}\n        }).then(() => {\n          setState({\n            isLoading: false,\n            error: \"\"\n          });\n          toast({\n            title: \"Successfully Added Image\",\n            status: \"success\",\n            duration: 2000,\n            position: \"top\"\n          });\n        }).catch(error => {\n          setState({\n            isLoading: false,\n            error: error.message\n          });\n        });\n      }).catch(error => {\n        setState({\n          isLoading: false,\n          error: error.message\n        });\n      });\n    }\n  }, [url, method, userData, toast]);\n  const fn = async data => {\n    setState(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n  };\n  return {\n    mutate: fn,\n    ...state\n  };\n};\n\n// const useMutation = ({ url, method = 'POST' }) => {\n//   const toast = useToast();\n//   const [state, setState] = useState({\n//     isLoading: false,\n//     error: '',\n//   });\n\n//   const fn = async data => {\n//     setState(prev => ({\n//       ...prev,\n//       isLoading: true,\n//     }));\n//     axiosClient({ url, method, data })\n//       .then(() => {\n//         setState({ isLoading: false, error: '' });\n//         toast({\n//           title: 'Successfully Added Image',\n//           status: 'success',\n//           duration: 2000,\n//           position: 'top',\n//         });\n//       })\n//       .catch(error => {\n//         setState({ isLoading: false, error: error.message });\n//       });\n//   };\n\n//   return { mutate: fn, ...state };\n// };\n_s(useMutation, \"MlWA4rtGrkSHc3Yo0hKgjCK3nnM=\", false, function () {\n  return [useToast, useQuery];\n});\nexport default useMutation;","map":{"version":3,"names":["useToast","useState","useEffect","axiosClient","AuthService","QUERY_USER","useQuery","useMutation","_ref","_s","url","method","toast","state","setState","isLoading","error","loading","data","userData","variables","username","getUsername","user","then","title","status","duration","position","catch","message","fn","prev","mutate"],"sources":["/Users/risvitareq/code/prod-collab2/client/src/utils/imgMutation.js"],"sourcesContent":["import { useToast } from \"@chakra-ui/react\";\nimport { useState, useEffect } from \"react\";\nimport axiosClient from \"../config/axios\";\nimport AuthService from \"./auth\";\nimport { QUERY_USER } from \"./queries\";\nimport { useQuery } from \"@apollo/client\";\n\nconst useMutation = ({ url, method = \"POST\" }) => {\n  const toast = useToast();\n  const [state, setState] = useState({\n    isLoading: false,\n    error: \"\",\n  });\n\n  const { loading, data: userData } = useQuery(QUERY_USER, {\n    variables: { username: AuthService.getUsername() },\n  });\n\n  const user = userData?.user.username || {};\n\n  useEffect(() => {\n    // Extract the username to a separate variable\n    const username = userData?.user.username;\n\n    if (username) {\n      // Create a unique folder name for each user (replace 'userId' with the actual user ID)\n      // You should get the user ID from your authentication system\n\n      // Add a folder creation step before making the HTTP request\n      axiosClient({ url: `/create-folder/${username}`, method: \"POST\" })\n        .then(() => {\n          // Now, you can proceed with your original HTTP request\n          axiosClient({ url, method, data: {}})\n            .then(() => {\n              setState({ isLoading: false, error: \"\" });\n              toast({\n                title: \"Successfully Added Image\",\n                status: \"success\",\n                duration: 2000,\n                position: \"top\",\n              });\n            })\n            .catch((error) => {\n              setState({ isLoading: false, error: error.message });\n            });\n        })\n        .catch((error) => {\n          setState({ isLoading: false, error: error.message });\n        });\n    }\n  }, [url, method, userData, toast]);\n\n  const fn = async (data) => {\n    setState((prev) => ({\n      ...prev,\n      isLoading: true,\n    }));\n  };\n\n  return { mutate: fn, ...state };\n};\n\n// const useMutation = ({ url, method = 'POST' }) => {\n//   const toast = useToast();\n//   const [state, setState] = useState({\n//     isLoading: false,\n//     error: '',\n//   });\n\n//   const fn = async data => {\n//     setState(prev => ({\n//       ...prev,\n//       isLoading: true,\n//     }));\n//     axiosClient({ url, method, data })\n//       .then(() => {\n//         setState({ isLoading: false, error: '' });\n//         toast({\n//           title: 'Successfully Added Image',\n//           status: 'success',\n//           duration: 2000,\n//           position: 'top',\n//         });\n//       })\n//       .catch(error => {\n//         setState({ isLoading: false, error: error.message });\n//       });\n//   };\n\n//   return { mutate: fn, ...state };\n// };\n\nexport default useMutation;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,WAAW,MAAM,iBAAiB;AACzC,OAAOC,WAAW,MAAM,QAAQ;AAChC,SAASC,UAAU,QAAQ,WAAW;AACtC,SAASC,QAAQ,QAAQ,gBAAgB;AAEzC,MAAMC,WAAW,GAAGC,IAAA,IAA8B;EAAAC,EAAA;EAAA,IAA7B;IAAEC,GAAG;IAAEC,MAAM,GAAG;EAAO,CAAC,GAAAH,IAAA;EAC3C,MAAMI,KAAK,GAAGZ,QAAQ,EAAE;EACxB,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC;IACjCc,SAAS,EAAE,KAAK;IAChBC,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,MAAM;IAAEC,OAAO;IAAEC,IAAI,EAAEC;EAAS,CAAC,GAAGb,QAAQ,CAACD,UAAU,EAAE;IACvDe,SAAS,EAAE;MAAEC,QAAQ,EAAEjB,WAAW,CAACkB,WAAW;IAAG;EACnD,CAAC,CAAC;EAEF,MAAMC,IAAI,GAAG,CAAAJ,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEI,IAAI,CAACF,QAAQ,KAAI,CAAC,CAAC;EAE1CnB,SAAS,CAAC,MAAM;IACd;IACA,MAAMmB,QAAQ,GAAGF,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEI,IAAI,CAACF,QAAQ;IAExC,IAAIA,QAAQ,EAAE;MACZ;MACA;;MAEA;MACAlB,WAAW,CAAC;QAAEO,GAAG,EAAG,kBAAiBW,QAAS,EAAC;QAAEV,MAAM,EAAE;MAAO,CAAC,CAAC,CAC/Da,IAAI,CAAC,MAAM;QACV;QACArB,WAAW,CAAC;UAAEO,GAAG;UAAEC,MAAM;UAAEO,IAAI,EAAE,CAAC;QAAC,CAAC,CAAC,CAClCM,IAAI,CAAC,MAAM;UACVV,QAAQ,CAAC;YAAEC,SAAS,EAAE,KAAK;YAAEC,KAAK,EAAE;UAAG,CAAC,CAAC;UACzCJ,KAAK,CAAC;YACJa,KAAK,EAAE,0BAA0B;YACjCC,MAAM,EAAE,SAAS;YACjBC,QAAQ,EAAE,IAAI;YACdC,QAAQ,EAAE;UACZ,CAAC,CAAC;QACJ,CAAC,CAAC,CACDC,KAAK,CAAEb,KAAK,IAAK;UAChBF,QAAQ,CAAC;YAAEC,SAAS,EAAE,KAAK;YAAEC,KAAK,EAAEA,KAAK,CAACc;UAAQ,CAAC,CAAC;QACtD,CAAC,CAAC;MACN,CAAC,CAAC,CACDD,KAAK,CAAEb,KAAK,IAAK;QAChBF,QAAQ,CAAC;UAAEC,SAAS,EAAE,KAAK;UAAEC,KAAK,EAAEA,KAAK,CAACc;QAAQ,CAAC,CAAC;MACtD,CAAC,CAAC;IACN;EACF,CAAC,EAAE,CAACpB,GAAG,EAAEC,MAAM,EAAEQ,QAAQ,EAAEP,KAAK,CAAC,CAAC;EAElC,MAAMmB,EAAE,GAAG,MAAOb,IAAI,IAAK;IACzBJ,QAAQ,CAAEkB,IAAI,KAAM;MAClB,GAAGA,IAAI;MACPjB,SAAS,EAAE;IACb,CAAC,CAAC,CAAC;EACL,CAAC;EAED,OAAO;IAAEkB,MAAM,EAAEF,EAAE;IAAE,GAAGlB;EAAM,CAAC;AACjC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAAJ,EAAA,CAnFMF,WAAW;EAAA,QACDP,QAAQ,EAMcM,QAAQ;AAAA;AA8E9C,eAAeC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}