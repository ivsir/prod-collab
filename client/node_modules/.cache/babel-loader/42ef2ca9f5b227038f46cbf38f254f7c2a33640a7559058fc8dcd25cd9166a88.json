{"ast":null,"code":"var _s = $RefreshSig$();\n// import { useToast } from \"@chakra-ui/react\";\n// import { useState } from \"react\";\n// import axiosClient from \"../config/axios\";\n\n// const useMutation = ({ url, method = \"POST\" }) => {\n//   const toast = useToast();\n//   const [state, setState] = useState({\n//     isLoading: false,\n//     error: \"\",\n//   });\n\n//   const fn = async (data) => {\n//     setState((prev) => ({\n//       ...prev,\n//       isLoading: true,\n//     }));\n//     axiosClient({ url, method, data })\n//       .then(() => {\n//         setState({ isLoading: false, error: \"\" });\n//         toast({\n//           title: \"Successfully Added Image\",\n//           status: \"success\",\n//           duration: 2000,\n//           position: \"top\",\n//         });\n//       })\n//       .catch((error) => {\n//         setState({ isLoading: false, error: error.message });\n//       });\n//   };\n\n//   return { mutate: fn, ...state };\n// };\n\n// export default useMutation;\nimport { useToast } from \"@chakra-ui/react\";\nimport { useState } from \"react\";\nimport axiosClient from \"../config/axios\";\nconst useMutation = _ref => {\n  _s();\n  let {\n    url,\n    method = \"POST\"\n  } = _ref;\n  const toast = useToast();\n  const [state, setState] = useState({\n    isLoading: false,\n    error: \"\"\n  });\n  const fn = async (data, userId, folderName) => {\n    // Add userId and folderName as parameters\n    setState(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    axiosClient({\n      url,\n      method,\n      data\n    }).then(() => {\n      setState({\n        isLoading: false,\n        error: \"\"\n      });\n      toast({\n        title: \"Successfully Added Image\",\n        status: \"success\",\n        duration: 2000,\n        position: \"top\"\n      });\n\n      // Check if userId and folderName are provided, and then create the folder\n      if (userId && folderName) {\n        createFolder(userId, folderName);\n      }\n    }).catch(error => {\n      setState({\n        isLoading: false,\n        error: error.message\n      });\n    });\n  };\n\n  // Function to create a folder (you'll need to implement this)\n  const createFolder = (userId, folderName) => {\n    // Make an API request or perform necessary logic to create the folder\n    // Example:\n    axiosClient({\n      url: '/create-s3-folder',\n      method: 'POST',\n      data: {\n        userId,\n        folderName\n      }\n    }).then(response => {\n      // Handle the folder creation response as needed\n    }).catch(error => {\n      // Handle errors if folder creation fails\n    });\n  };\n  return {\n    mutate: fn,\n    ...state\n  };\n};\n_s(useMutation, \"ywplxB7UFJXwPxCCcrXdONUBpD4=\", false, function () {\n  return [useToast];\n});\nexport default useMutation;","map":{"version":3,"names":["useToast","useState","axiosClient","useMutation","_ref","_s","url","method","toast","state","setState","isLoading","error","fn","data","userId","folderName","prev","then","title","status","duration","position","createFolder","catch","message","response","mutate"],"sources":["/Users/risvitareq/code/prod-collab2/client/src/utils/imgMutation.js"],"sourcesContent":["// import { useToast } from \"@chakra-ui/react\";\n// import { useState } from \"react\";\n// import axiosClient from \"../config/axios\";\n\n// const useMutation = ({ url, method = \"POST\" }) => {\n//   const toast = useToast();\n//   const [state, setState] = useState({\n//     isLoading: false,\n//     error: \"\",\n//   });\n\n//   const fn = async (data) => {\n//     setState((prev) => ({\n//       ...prev,\n//       isLoading: true,\n//     }));\n//     axiosClient({ url, method, data })\n//       .then(() => {\n//         setState({ isLoading: false, error: \"\" });\n//         toast({\n//           title: \"Successfully Added Image\",\n//           status: \"success\",\n//           duration: 2000,\n//           position: \"top\",\n//         });\n//       })\n//       .catch((error) => {\n//         setState({ isLoading: false, error: error.message });\n//       });\n//   };\n\n//   return { mutate: fn, ...state };\n// };\n\n// export default useMutation;\nimport { useToast } from \"@chakra-ui/react\";\nimport { useState } from \"react\";\nimport axiosClient from \"../config/axios\";\n\nconst useMutation = ({ url, method = \"POST\" }) => {\n  const toast = useToast();\n  const [state, setState] = useState({\n    isLoading: false,\n    error: \"\",\n  });\n\n  const fn = async (data, userId, folderName) => { // Add userId and folderName as parameters\n    setState((prev) => ({\n      ...prev,\n      isLoading: true,\n    }));\n    axiosClient({ url, method, data })\n      .then(() => {\n        setState({ isLoading: false, error: \"\" });\n        toast({\n          title: \"Successfully Added Image\",\n          status: \"success\",\n          duration: 2000,\n          position: \"top\",\n        });\n        \n        // Check if userId and folderName are provided, and then create the folder\n        if (userId && folderName) {\n          createFolder(userId, folderName);\n        }\n      })\n      .catch((error) => {\n        setState({ isLoading: false, error: error.message });\n      });\n  };\n\n  // Function to create a folder (you'll need to implement this)\n  const createFolder = (userId, folderName) => {\n    // Make an API request or perform necessary logic to create the folder\n    // Example:\n    axiosClient({ url: '/create-s3-folder', method: 'POST', data: { userId, folderName } })\n      .then((response) => {\n        // Handle the folder creation response as needed\n      })\n      .catch((error) => {\n        // Handle errors if folder creation fails\n      });\n  };\n\n  return { mutate: fn, ...state };\n};\n\nexport default useMutation;\n"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAASA,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,WAAW,MAAM,iBAAiB;AAEzC,MAAMC,WAAW,GAAGC,IAAA,IAA8B;EAAAC,EAAA;EAAA,IAA7B;IAAEC,GAAG;IAAEC,MAAM,GAAG;EAAO,CAAC,GAAAH,IAAA;EAC3C,MAAMI,KAAK,GAAGR,QAAQ,EAAE;EACxB,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC;IACjCU,SAAS,EAAE,KAAK;IAChBC,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,MAAMC,EAAE,GAAG,MAAAA,CAAOC,IAAI,EAAEC,MAAM,EAAEC,UAAU,KAAK;IAAE;IAC/CN,QAAQ,CAAEO,IAAI,KAAM;MAClB,GAAGA,IAAI;MACPN,SAAS,EAAE;IACb,CAAC,CAAC,CAAC;IACHT,WAAW,CAAC;MAAEI,GAAG;MAAEC,MAAM;MAAEO;IAAK,CAAC,CAAC,CAC/BI,IAAI,CAAC,MAAM;MACVR,QAAQ,CAAC;QAAEC,SAAS,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAG,CAAC,CAAC;MACzCJ,KAAK,CAAC;QACJW,KAAK,EAAE,0BAA0B;QACjCC,MAAM,EAAE,SAAS;QACjBC,QAAQ,EAAE,IAAI;QACdC,QAAQ,EAAE;MACZ,CAAC,CAAC;;MAEF;MACA,IAAIP,MAAM,IAAIC,UAAU,EAAE;QACxBO,YAAY,CAACR,MAAM,EAAEC,UAAU,CAAC;MAClC;IACF,CAAC,CAAC,CACDQ,KAAK,CAAEZ,KAAK,IAAK;MAChBF,QAAQ,CAAC;QAAEC,SAAS,EAAE,KAAK;QAAEC,KAAK,EAAEA,KAAK,CAACa;MAAQ,CAAC,CAAC;IACtD,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMF,YAAY,GAAGA,CAACR,MAAM,EAAEC,UAAU,KAAK;IAC3C;IACA;IACAd,WAAW,CAAC;MAAEI,GAAG,EAAE,mBAAmB;MAAEC,MAAM,EAAE,MAAM;MAAEO,IAAI,EAAE;QAAEC,MAAM;QAAEC;MAAW;IAAE,CAAC,CAAC,CACpFE,IAAI,CAAEQ,QAAQ,IAAK;MAClB;IAAA,CACD,CAAC,CACDF,KAAK,CAAEZ,KAAK,IAAK;MAChB;IAAA,CACD,CAAC;EACN,CAAC;EAED,OAAO;IAAEe,MAAM,EAAEd,EAAE;IAAE,GAAGJ;EAAM,CAAC;AACjC,CAAC;AAACJ,EAAA,CA9CIF,WAAW;EAAA,QACDH,QAAQ;AAAA;AA+CxB,eAAeG,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}